'.' + '!' + '^'

def parser(self):
        result = self.expression()
        if self.current_token.type != TokenType.EOF:
            raise SyntaxError(f"Unexpected token: {self.current_token.type}")
        return result

    def expression(self):
        return self.concat()


    def concat(self):
        result = self.inversion()
        while self.current_token.type == TokenType.CONCAT:
            self.consume(TokenType.CONCAT)
            result += self.inversion()
        return result

    def inversion(self):
        if self.current_token.type == TokenType.INVERT:
            self.consume(TokenType.INVERT)
            return self.power()[::-1]
        return self.power()

    def power(self):
        result = self.last()
        if self.current_token.type == TokenType.POWER:
            self.consume(TokenType.POWER)
            times = self.power()
            if not times.isdigit():
                raise ValueError(f"Expected digit after ^, got: {times}")
            result = result * int(times)
        return result

    def last(self):
        if self.current_token.type == TokenType.STRING:
            value = self.current_token.attribute
            self.consume(TokenType.STRING)
            return value
        elif self.current_token.type == TokenType.LPAREN:
            self.consume(TokenType.LPAREN)
            result = self.expression()
            self.consume(TokenType.RPAREN)
            return result
        else:
            raise SyntaxError(f"Unexpected token: {self.current_token}")