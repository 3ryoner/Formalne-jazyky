from Lexer import TokenType

# reverse (R)(3), concat(2), степень со строчкой(1)


'''
<expression> ::= <power> EOF ;

<power> ::= <concat> { "^" <concat> } ;

<concat> ::= <reverse> { "." <reverse> } ;

<reverse> ::= "R" <reverse> | <atom> ;

<atom> ::= STRING | NUMBER | "(" <power> ")" ;
'''

class Parser:
    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()

    def consume(self, expected_token_type):
        if self.current_token.type == expected_token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            raise SyntaxError(
                f"Syntax error: expected token type {expected_token_type}, but found token type {self.current_token.type}"
            )

    def parse(self):
        result = self.power()
        if self.current_token.type != TokenType.EOF:
            raise SyntaxError("jfenjfnef")
        return result

    def power(self):
        result = self.concat()
        while self.current_token.type == TokenType.POWER:
            self.consume(TokenType.POWER)
            result *= self.concat()
        return result

    def concat(self):
        result = self.reverse()
        while self.current_token.type == TokenType.CONCAT:
            self.consume(TokenType.CONCAT)
            result = str(result) + str(self.reverse())
        return result

    def reverse(self):
        if self.current_token.type == TokenType.INVERT:
            self.consume(TokenType.INVERT)
            result = self.reverse()[::-1]
            return result
        else:
            return self.last()


    def last(self):
        if self.current_token.type == TokenType.STRING:
            value = self.current_token.attribute
            self.consume(TokenType.STRING)
            return value
        elif self.current_token.type == TokenType.NUMBER:
            value = self.current_token.attribute
            self.consume(TokenType.NUMBER)
            return value
        elif self.current_token.type == TokenType.LPAREN:
            self.consume(TokenType.LPAREN)
            result = self.power()
            self.consume(TokenType.RPAREN)
            return result
        else:
            raise SyntaxError("kenkenfiefk")